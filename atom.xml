<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StormCavalry</title>
  
  <subtitle>Hello ! My name is RenWei.</subtitle>
  <link href="/StormCavalry.github.io/atom.xml" rel="self"/>
  
  <link href="https://stormcavalry.github.io/"/>
  <updated>2020-03-01T06:56:41.059Z</updated>
  <id>https://stormcavalry.github.io/</id>
  
  <author>
    <name>RenWei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 归并排序</title>
    <link href="https://stormcavalry.github.io/2020/03/01/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>https://stormcavalry.github.io/2020/03/01/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2020-03-01T06:44:01.186Z</published>
    <updated>2020-03-01T06:56:41.059Z</updated>
    
    <content type="html"><![CDATA[<h5 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h5><p>  在O(n log n)的时间内使用常数级空间复杂度对链表进行排序，用归并排序来解决快速且稳定；归并排序即先使每个子序列有序，再使子序列段间有序；将已有序的子序列合并，得到完全有序的序列。</p><h5 id="递归得到子序列"><a href="#递归得到子序列" class="headerlink" title="递归得到子序列"></a>递归得到子序列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 找中点</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     ListNode first=head;</span><br><span class="line">     ListNode last=head;</span><br><span class="line">     <span class="keyword">while</span>(first.next!=<span class="keyword">null</span>&amp;&amp;first.next.next!=<span class="keyword">null</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         first=first.next.next;</span><br><span class="line">         last=last.next;</span><br><span class="line">     &#125;</span><br><span class="line">     ListNode mid =last.next;</span><br><span class="line">     <span class="comment">//断开链表</span></span><br><span class="line">     last.next=<span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">return</span> merge(sortList(head),sortList(mid));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="合并子序列"><a href="#合并子序列" class="headerlink" title="合并子序列"></a>合并子序列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">merge</span><span class="params">(ListNode a,ListNode b)</span></span>&#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 给定一个头节点</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode m = head;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="keyword">null</span>&amp;&amp;b!=<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 从小到大排列</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span>(a.val&lt;b.val)</span><br><span class="line">            &#123;</span><br><span class="line">                m.next=a;</span><br><span class="line">                a=a.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                m.next=b;</span><br><span class="line">                b=b.next;</span><br><span class="line">            &#125;</span><br><span class="line">            m=m.next;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 看谁不为空，就代表它更大，应该排在后面</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">          <span class="keyword">if</span>(a!=<span class="keyword">null</span>) m.next=a;</span><br><span class="line">            <span class="keyword">else</span> m.next=b;</span><br><span class="line">            <span class="comment">//去掉头节点</span></span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;基本思路&quot;&gt;&lt;a href=&quot;#基本思路&quot; class=&quot;headerlink&quot; title=&quot;基本思路&quot;&gt;&lt;/a&gt;基本思路&lt;/h5&gt;&lt;p&gt;  在O(n log n)的时间内使用常数级空间复杂度对链表进行排序，用归并排序来解决快速且稳定；归并排序即先使每个子序列有
      
    
    </summary>
    
    
    
      <category term="leetcode" scheme="https://stormcavalry.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>第一天记录</title>
    <link href="https://stormcavalry.github.io/2020/02/29/Hello!%20%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://stormcavalry.github.io/2020/02/29/Hello!%20%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-02-29T12:50:10.605Z</published>
    <updated>2020-02-29T12:53:48.266Z</updated>
    
    <content type="html"><![CDATA[<ul><li>第一次搭建博客，是基于<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>搭建的，希望以后能坚持写博客。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;第一次搭建博客，是基于&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt;搭建的，希望以后能坚持写博客。&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
